# -*- coding: utf-8 -*-
"""Channels_Detection

Automatically generated by Colaboratory.
"""

# Import the libraries
import datetime as dt

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

import plotly.graph_objects as go

# Upload the dataset
from google.colab import files
files.upload()

# Loads the data
df = pd.read_csv("EURUSD_Candlestick_4_Hour_ASK_05.05.2003-16.10.2021.csv")
df.columns = ['time', 'open', 'high', 'low', 'close', 'volume']
df.head(10)

# Clean the df
print(df.shape)
df=df[df['volume']!=0]
print(df.shape)
df.reset_index(drop=True, inplace=True)
print(df.isna().sum())

df_plot = df[7000:7200]

fig = go.Figure(data=[go.Candlestick(
    x=df_plot.index,
    open=df_plot['open'],
    high=df_plot['high'],
    low=df_plot['low'],
    close=df_plot['close']
)])

fig.show()

back_candles = 50
wind = 5

candle_id = 7150

maxim = np.array([])
minim = np.array([])
xxmin = np.array([])
xxmax = np.array([])

for i in range(candle_id - back_candles, candle_id + 1, wind):
  minim = np.append(minim, df.low.iloc[i:i+wind].min())
  xxmin = np.append(xxmin, df.low.iloc[i:i+wind].idxmin())

  maxim = np.append(maxim, df.high.iloc[i:i+wind].max())
  xxmax = np.append(xxmax, df.high.iloc[i:i+wind].idxmax())

slmin, intercmin = np.polyfit(xxmin, minim, 1)
slmax, intercmax = np.polyfit(xxmax, maxim, 1)

fig.add_trace(go.Scatter(x=xxmin, y=slmin*xxmin + intercmin, mode='lines', name='min slope'))
fig.add_trace(go.Scatter(x=xxmax, y=slmax*xxmax + intercmax, mode='lines', name='max slope'))

df_plot = df[candle_id-back_candles*2:candle_id+back_candles]

fig = go.Figure(data=[go.Candlestick(
    x=df_plot.index,
    open=df_plot['open'],
    high=df_plot['high'],
    low=df_plot['low'],
    close=df_plot['close']
)])

adjmin = df.low.loc[candle_id-back_candles:candle_id].min() - \
  slmin*df.low.iloc[candle_id-back_candles:candle_id].idxmin()
adjmax = df.high.loc[candle_id-back_candles:candle_id].max() - \
  slmax*df.high.iloc[candle_id-back_candles:candle_id].idxmax()

fig.add_trace(go.Scatter(x=xxmin, y=slmin*xxmin+adjmin, mode='lines', name='min slope'))
fig.add_trace(go.Scatter(x=xxmax, y=slmax*xxmax+adjmax, mode='lines', name='max slope'))

fig.show()

df_plot = df[candle_id-back_candles*2:candle_id+back_candles]

fig = go.Figure(data=[go.Candlestick(
    x=df_plot.index,
    open=df_plot['open'],
    high=df_plot['high'],
    low=df_plot['low'],
    close=df_plot['close']
)])

adjmin = (df.low.iloc[xxmin] - slmin*xxmin).min()
adjmax = (df.high.iloc[xxmax] - slmax*xxmax).max()

fig.add_trace(go.Scatter(x=xxmin, y=slmin*xxmin+adjmin, mode='lines', name='min slope'))
fig.add_trace(go.Scatter(x=xxmax, y=slmax*xxmax+adjmax, mode='lines', name='max slope'))

fig.show()

back_candles = 40
brange = 10
wind = 6

cadle_id = 5000

optbackcandles= back_candles
sldiff = 10000

for r1 in range(back_candles-brange, back_candles+brange):
  maxim = np.array([])
  minim = np.array([])
  xxmin = np.array([])
  xxmax = np.array([])

  for i in range(candle_id-r1, candle_id+1, wind):
    minim = np.append(minim, df.low.iloc[i:i+wind].min())
    xxmin = np.append(xxmin, df.low.iloc[i:i+wind].idxmin())
    maxim = np.append(maxim, df.high.loc[i:i+wind].max())
    xxmax = np.append(xxmax, df.high.iloc[i:i+wind].idxmax())

  slmin, intercmin = np.polyfit(xxmin, minim,1)
  slmax, intercmax = np.polyfit(xxmax, maxim,1)
  
  if(abs(slmin-slmax)<sldiff):
    sldiff = abs(slmin-slmax)
    optbackcandles=r1
    slminopt = slmin
    slmaxopt = slmax
    intercminopt = intercmin
    intercmaxopt = intercmax
    maximopt = maxim.copy()
    minimopt = minim.copy()
    xxminopt = xxmin.copy()
    xxmaxopt = xxmax.copy()

    print(optbackcandles)

df_plot = df[candle_id-wind-optbackcandles-back_candles:candle_id+optbackcandles]  
fig = go.Figure(data=[go.Candlestick(
    x=df_plot.index,
    open=df_plot['open'],
    high=df_plot['high'],
    low=df_plot['low'],
    close=df_plot['close']
)])

adjmax = (df.high.iloc[xxmaxopt] - slmaxopt*xxmaxopt).max()
adjmin = (df.low.iloc[xxminopt] - slminopt*xxminopt).min()
fig.add_trace(go.Scatter(x=xxminopt, y=slminopt*xxminopt + adjmin, mode='lines', name='min slope'))
fig.add_trace(go.Scatter(x=xxmaxopt, y=slmaxopt*xxmaxopt + adjmax, mode='lines', name='max slope'))
fig.show()

back_candles= 100
brange = 50 #should be less than back_candles
wind = 5

candle_id = 10100

optback_candles= back_candles
sldiff = 100
sldist = 10000

for r1 in range(back_candles-brange, back_candles+brange):
    maxim = np.array([])
    minim = np.array([])
    xxmin = np.array([])
    xxmax = np.array([])
    
    for i in range(candle_id-r1, candle_id+1, wind):
        minim = np.append(minim, df.low.iloc[i:i+wind].min())
        xxmin = np.append(xxmin, df.low.iloc[i:i+wind].idxmin())
        maxim = np.append(maxim, df.high.loc[i:i+wind].max())
        xxmax = np.append(xxmax, df.high.iloc[i:i+wind].idxmax())

    slmin, intercmin = np.polyfit(xxmin, minim,1)
    slmax, intercmax = np.polyfit(xxmax, maxim,1)
    
    dist = (slmax*candle_id + intercmax)-(slmin*candle_id + intercmin)
    if(dist<sldist): #abs(slmin-slmax)<sldiff and
        #sldiff = abs(slmin-slmax)
        sldist = dist
        optback_candles=r1
        slminopt = slmin
        slmaxopt = slmax
        intercminopt = intercmin
        intercmaxopt = intercmax
        maximopt = maxim.copy()
        minimopt = minim.copy()
        xxminopt = xxmin.copy()
        xxmaxopt = xxmax.copy()


print(optback_candles)
dfpl = df[candle_id-wind-optback_candles-back_candles:candle_id+optback_candles]  
fig = go.Figure(data=[go.Candlestick(
    x=dfpl.index,
    open=dfpl['open'],
    high=dfpl['high'],
    low=dfpl['low'],
    close=dfpl['close']
)])

adjintercmax = (df.high.iloc[xxmaxopt] - slmaxopt*xxmaxopt).max()
adjintercmin = (df.low.iloc[xxminopt] - slminopt*xxminopt).min()
fig.add_trace(go.Scatter(x=xxminopt, y=slminopt*xxminopt + adjintercmin, mode='lines', name='min slope'))
fig.add_trace(go.Scatter(x=xxmaxopt, y=slmaxopt*xxmaxopt + adjintercmax, mode='lines', name='max slope'))
fig.show()
